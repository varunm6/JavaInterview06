SQL Code Questions 1
SQL Code Questions
MySQL Create Table Questions
1. Write a SQL statement to create a simple table countries including columns 
country_id,country_name and region_id.
CREATE TABLE countries( 
COUNTRY_ID varchar(2), 
COUNTRY_NAME varchar(40), 
REGION_ID decimal(10,0) 
); 
DESC countries;
Here is the structure of the table:
2. Write a SQL statement to create a simple table countries including columns 
country_id,country_name and region_id which is already exists.
CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID varchar(2), 
COUNTRY_NAME varchar(40), 
REGION_ID decimal(10,0) 
);
Here is the structure of the table:
SQL Code Questions 2
3. Write a SQL statement to create the structure of a table dup_countries 
similar to countries.
CREATE TABLE IF NOT EXISTS dup_countries 
LIKE countries;
Here is the structure of the table:
4. Write a SQL statement to create a duplicate copy of countries table 
including structure and data by name dup_countries.
CREATE TABLE IF NOT EXISTS dup_countries 
AS SELECT * FROM  countries;
Here is the structure of the table:
SQL Code Questions 3
5. Write a SQL statement to create a table countries set a constraint NULL.
CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID varchar(2) NOT NULL, 
COUNTRY_NAME varchar(40) NOT NULL, 
REGION_ID decimal(10,0) NOT NULL 
);
Here is the structure of the table:
6. Write a SQL statement to create a table named jobs including columns 
job_id, job_title, min_salary, max_salary and check whether the max_salary 
amount exceeding the upper limit 25000.
CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID varchar(10) NOT NULL , 
JOB_TITLE varchar(35) NOT NULL, 
MIN_SALARY decimal(6,0), 
MAX_SALARY decimal(6,0) 
CHECK(MAX_SALARY<=25000) 
);
Here is the structure of the table:
SQL Code Questions 4
7. Write a SQL statement to create a table named countries including columns 
country_id, country_name and region_id and make sure that no countries 
except Italy, India and China will be entered in the table.
CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID varchar(2), 
COUNTRY_NAME varchar(40) 
CHECK(COUNTRY_NAME IN('Italy','India','China')) , 
REGION_ID decimal(10,0) 
);
8. Write a SQL statement to create a table named job_histry including columns 
employee_id, start_date, end_date, job_id and department_id and make sure 
that the value against column end_date will be entered at the time of insertion 
to the format like '--/--/----'.
CREATE TABLE IF NOT EXISTS job_history ( 
EMPLOYEE_ID decimal(6,0) NOT NULL, 
START_DATE date NOT NULL, 
END_DATE date NOT NULL 
CHECK (END_DATE LIKE '--/--/----'), 
JOB_ID varchar(10) NOT NULL, 
DEPARTMENT_ID decimal(4,0) NOT NULL 
);
SQL Code Questions 5
Here is the structure of the table:
9. Write a SQL statement to create a table named countries including columns 
country_id,country_name and region_id and make sure that no duplicate data 
against column country_id will be allowed at the time of insertion.
CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID varchar(2) NOT NULL, 
COUNTRY_NAME varchar(40) NOT NULL, 
REGION_ID decimal(10,0) NOT NULL, 
UNIQUE(COUNTRY_ID) 
);
Here is the structure of the table:
10. Write a SQL statement to create a table named jobs including columns 
job_id, job_title, min_salary and max_salary, and make sure that, the default 
value for job_title is blank and min_salary is 8000 and max_salary is NULL will 
be entered automatically at the time of insertion if no value assigned for the 
specified columns.
SQL Code Questions 6
CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID varchar(10) NOT NULL UNIQUE, 
JOB_TITLE varchar(35) NOT NULL DEFAULT ' ', 
MIN_SALARY decimal(6,0) DEFAULT 8000, 
MAX_SALARY decimal(6,0) DEFAULT NULL 
);
Here is the structure of the table:
11. Write a SQL statement to create a table named countries including columns 
country_id, country_name and region_id and make sure that the country_id 
column will be a key field which will not contain any duplicate data at the time 
of insertion.
CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID varchar(2) NOT NULL UNIQUE PRIMARY KEY, 
COUNTRY_NAME varchar(40) NOT NULL, 
REGION_ID decimal(10,0) NOT NULL 
);
12. Write a SQL statement to create a table countries including columns 
country_id, country_name and region_id and make sure that the column 
SQL Code Questions 7
country_id will be unique and store an auto incremented value.
CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID integer NOT NULL UNIQUE AUTO_INCREMENT PRIMARY KEY, 
COUNTRY_NAME varchar(40) NOT NULL, 
REGION_ID decimal(10,0) NOT NULL 
); 
DESC countries;
Here is the structure of the table:
13. Write a SQL statement to create a table countries including columns 
country_id, country_name and region_id and make sure that the combination 
of columns country_id and region_id will be unique.
CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID varchar(2) NOT NULL UNIQUE DEFAULT '', 
COUNTRY_NAME varchar(40) DEFAULT NULL, 
REGION_ID decimal(10,0) NOT NULL, 
PRIMARY KEY (COUNTRY_ID,REGION_ID));
Here is the structure of the table:
SQL Code Questions 8
14. Write a SQL statement to create a table job_history including columns 
employee_id, start_date, end_date, job_id and department_id and make sure 
that, the employee_id column does not contain any duplicate value at the time 
of insertion and the foreign key column job_id contain only those values which 
are exists in the jobs table.
Here is the structure of the table jobs;
+------------+--------------+------+-----+---------+-------+ 
| Field      | Type         | Null | Key | Default | Extra | 
+------------+--------------+------+-----+---------+-------+ 
| JOB_ID     | varchar(10)  | NO   | PRI |         |       | 
| JOB_TITLE  | varchar(35)  | NO   |     | NULL    |       | 
| MIN_SALARY | decimal(6,0) | YES  |     | NULL    |       | 
| MAX_SALARY | decimal(6,0) | YES  |     | NULL    |       | 
+------------+--------------+------+-----+---------+-------+ 
CREATE TABLE job_history ( 
EMPLOYEE_ID decimal(6,0) NOT NULL PRIMARY KEY, 
START_DATE date NOT NULL, 
END_DATE date NOT NULL, 
JOB_ID varchar(10) NOT NULL, 
DEPARTMENT_ID decimal(4,0) DEFAULT NULL, 
FOREIGN KEY (job_id) REFERENCES jobs(job_id) 
)ENGINE=InnoDB;
Here is the structure of the table:
15. Write a SQL statement to create a table employees including columns 
employee_id, first_name, last_name, email, phone_number hire_date, job_id, 
salary, commission, manager_id and department_id and make sure that, the 
employee_id column does not contain any duplicate value at the time of 
insertion and the foreign key columns combined by department_id and 
SQL Code Questions 9
manager_id columns contain only those unique combination values, which 
combinations are exists in the departments table.
Assume the structure of departments table below.
+-----------------+--------------+------+-----+---------+-------+ 
| Field           | Type         | Null | Key | Default | Extra | 
+-----------------+--------------+------+-----+---------+-------+ 
| DEPARTMENT_ID   | decimal(4,0) | NO   | PRI | 0       |       | 
| DEPARTMENT_NAME | varchar(30)  | NO   |     | NULL    |       | 
| MANAGER_ID      | decimal(6,0) | NO   | PRI | 0       |       | 
| LOCATION_ID     | decimal(4,0) | YES  |     | NULL    |       | 
+-----------------+--------------+------+-----+---------+-------+ 
CREATE TABLE IF NOT EXISTS employees ( 
EMPLOYEE_ID decimal(6,0) NOT NULL PRIMARY KEY, 
FIRST_NAME varchar(20) DEFAULT NULL, 
LAST_NAME varchar(25) NOT NULL, 
EMAIL varchar(25) NOT NULL, 
PHONE_NUMBER varchar(20) DEFAULT NULL, 
HIRE_DATE date NOT NULL, 
JOB_ID varchar(10) NOT NULL, 
SALARY decimal(8,2) DEFAULT NULL, 
COMMISSION_PCT decimal(2,2) DEFAULT NULL, 
MANAGER_ID decimal(6,0) DEFAULT NULL, 
DEPARTMENT_ID decimal(4,0) DEFAULT NULL, 
FOREIGN KEY(DEPARTMENT_ID,MANAGER_ID) 
REFERENCES  departments(DEPARTMENT_ID,MANAGER_ID) 
)ENGINE=InnoDB;
Here is the structure of the table:
SQL Code Questions 10
16. Write a SQL statement to create a table employees including columns 
employee_id, first_name, last_name, email, phone_number hire_date, job_id, 
salary, commission, manager_id and department_id and make sure that, the 
employee_id column does not contain any duplicate value at the time of 
insertion, and the foreign key column department_id, reference by the column 
department_id of departments table, can contain only those values which are 
exists in the departments table and another foreign key column job_id, 
referenced by the column job_id of jobs table, can contain only those values 
which are exists in the jobs table. The InnoDB Engine have been used to 
create the tables.
"A foreign key constraint is not required merely to join two tables. For storage 
engines other than InnoDB, it is possible when defining a column to use a 
REFERENCES tbl_name(col_name) clause, which has no actual effect, and 
serves only as a memo or comment to you that the column which you are 
currently defining is intended to refer to a column in another table." - 
Reference dev.mysql.com
Assume that the structure of two tables departments and jobs.
+-----------------+--------------+------+-----+---------+-------+ 
| Field           | Type         | Null | Key | Default | Extra | 
+-----------------+--------------+------+-----+---------+-------+ 
| DEPARTMENT_ID   | decimal(4,0) | NO   | PRI | 0       |       | 
| DEPARTMENT_NAME | varchar(30)  | NO   |     | NULL    |       | 
| MANAGER_ID      | decimal(6,0) | YES  |     | NULL    |       | 
 
SQL Code Questions 11
| LOCATION_ID     | decimal(4,0) | YES  |     | NULL    |       | 
+-----------------+--------------+------+-----+---------+-------+ 
 
 
+------------+--------------+------+-----+---------+-------+ 
| Field      | Type         | Null | Key | Default | Extra | 
+------------+--------------+------+-----+---------+-------+ 
| JOB_ID     | varchar(10)  | NO   | PRI |         |       | 
| JOB_TITLE  | varchar(35)  | NO   |     | NULL    |       | 
| MIN_SALARY | decimal(6,0) | YES  |     | NULL    |       | 
| MAX_SALARY | decimal(6,0) | YES  |     | NULL    |       | 
+------------+--------------+------+-----+---------+-------+ 
CREATE TABLE IF NOT EXISTS employees ( 
EMPLOYEE_ID decimal(6,0) NOT NULL PRIMARY KEY, 
FIRST_NAME varchar(20) DEFAULT NULL, 
LAST_NAME varchar(25) NOT NULL, 
EMAIL varchar(25) NOT NULL, 
PHONE_NUMBER varchar(20) DEFAULT NULL, 
HIRE_DATE date NOT NULL, 
JOB_ID varchar(10) NOT NULL, 
SALARY decimal(8,2) DEFAULT NULL, 
COMMISSION_PCT decimal(2,2) DEFAULT NULL, 
MANAGER_ID decimal(6,0) DEFAULT NULL, 
DEPARTMENT_ID decimal(4,0) DEFAULT NULL, 
FOREIGN KEY(DEPARTMENT_ID) 
REFERENCES  departments(DEPARTMENT_ID), 
FOREIGN KEY(JOB_ID) 
REFERENCES  jobs(JOB_ID) 
)ENGINE=InnoDB;
Here is the structure of the table:
SQL Code Questions 12
17. Write a SQL statement to create a table employees including columns 
employee_id, first_name, last_name, job_id, salary and make sure that, the 
employee_id column does not contain any duplicate value at the time of 
insertion, and the foreign key column job_id, referenced by the column job_id 
of jobs table, can contain only those values which are exists in the jobs table. 
The InnoDB Engine have been used to create the tables. The specialty of the 
statement is that, The ON UPDATE CASCADE action allows you to perform 
cross-table update and ON DELETE RESTRICT action reject the deletion. The 
default action is ON DELETE RESTRICT.
Assume that the structure of the table jobs and InnoDB Engine have been 
used to create the table jobs.
CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID integer NOT NULL UNIQUE PRIMARY KEY, 
JOB_TITLE varchar(35) NOT NULL DEFAULT ' ', 
MIN_SALARY decimal(6,0) DEFAULT 8000, 
MAX_SALARY decimal(6,0) DEFAULT NULL 
)ENGINE=InnoDB; 
 
 
+------------+--------------+------+-----+---------+-------+ 
| Field      | Type         | Null | Key | Default | Extra | 
+------------+--------------+------+-----+---------+-------+ 
| JOB_ID     | int(11)      | NO   | PRI | NULL    |       | 
| JOB_TITLE  | varchar(35)  | NO   |     |         |       | 
| MIN_SALARY | decimal(6,0) | YES  |     | 8000    |       | 
| MAX_SALARY | decimal(6,0) | YES  |     | NULL    |       | 
+------------+--------------+------+-----+---------+-------+ 
CREATE TABLE IF NOT EXISTS employees ( 
EMPLOYEE_ID decimal(6,0) NOT NULL PRIMARY KEY, 
FIRST_NAME varchar(20) DEFAULT NULL, 
LAST_NAME varchar(25) NOT NULL, 
EMAIL varchar(25) NOT NULL, 
PHONE_NUMBER varchar(20) DEFAULT NULL, 
HIRE_DATE date NOT NULL, 
JOB_ID varchar(10) NOT NULL, 
SALARY decimal(8,2) DEFAULT NULL, 
COMMISSION_PCT decimal(2,2) DEFAULT NULL, 
MANAGER_ID decimal(6,0) DEFAULT NULL, 
DEPARTMENT_ID decimal(4,0) DEFAULT NULL, 
FOREIGN KEY(DEPARTMENT_ID) 
REFERENCES  departments(DEPARTMENT_ID), 
FOREIGN KEY(JOB_ID) 
REFERENCES  jobs(JOB_ID) 
)ENGINE=InnoDB;
SQL Code Questions 13
Here is the structure of the table:
18. Write a SQL statement to create a table employees including columns 
employee_id, first_name, last_name, job_id, salary and make sure that, the 
employee_id column does not contain any duplicate value at the time of 
insertion, and the foreign key column job_id, referenced by the column job_id 
of jobs table, can contain only those values which are exists in the jobs table. 
The InnoDB Engine have been used to create the tables. The specialty of the 
statement is that, The ON DELETE CASCADE that lets you allow to delete 
records in the employees(child) table that refer to a record in the jobs(parent) 
table when the record in the parent table is deleted and the ON UPDATE 
RESTRICT actions reject any updates.
Assume that the structure of the table jobs and InnoDB Engine have been 
used to create the table jobs.
CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID integer NOT NULL UNIQUE PRIMARY KEY, 
JOB_TITLE varchar(35) NOT NULL DEFAULT ' ', 
MIN_SALARY decimal(6,0) DEFAULT 8000, 
MAX_SALARY decimal(6,0) DEFAULT NULL 
)ENGINE=InnoDB; 
 
 
+------------+--------------+------+-----+---------+-------+ 
| Field      | Type         | Null | Key | Default | Extra | 
+------------+--------------+------+-----+---------+-------+ 
| JOB_ID     | int(11)      | NO   | PRI | NULL    |       | 
| JOB_TITLE  | varchar(35)  | NO   |     |         |       | 
SQL Code Questions 14
| MIN_SALARY | decimal(6,0) | YES  |     | 8000    |       | 
| MAX_SALARY | decimal(6,0) | YES  |     | NULL    |       | 
+------------+--------------+------+-----+---------+-------+ 
CREATE TABLE IF NOT EXISTS employees ( 
EMPLOYEE_ID decimal(6,0) NOT NULL PRIMARY KEY, 
FIRST_NAME varchar(20) DEFAULT NULL, 
LAST_NAME varchar(25) NOT NULL, 
JOB_ID INTEGER NOT NULL, 
SALARY decimal(8,2) DEFAULT NULL, 
FOREIGN KEY(JOB_ID) 
REFERENCES  jobs(JOB_ID) 
ON DELETE CASCADE ON UPDATE RESTRICT 
)ENGINE=InnoDB;
Here is the structure of the table:
19. Write a SQL statement to create a table employees including columns 
employee_id, first_name, last_name, job_id, salary and make sure that, the 
employee_id column does not contain any duplicate value at the time of 
insertion, and the foreign key column job_id, referenced by the column job_id 
of jobs table, can contain only those values which are exists in the jobs table. 
The InnoDB Engine have been used to create the tables. The specialty of the 
statement is that, The ON DELETE SET NULL action will set the foreign key 
column values in the child table(employees) to NULL when the record in the 
parent table(jobs) is deleted, with a condition that the foreign key column in 
SQL Code Questions 15
the child table must accept NULL values and the ON UPDATE SET NULL action 
resets the values in the rows in the child table(employees) to NULL values 
when the rows in the parent table(jobs) are updated.
Assume that the structure of two table jobs and InnoDB Engine have been 
used to create the table jobs.
CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID integer NOT NULL UNIQUE PRIMARY KEY, 
JOB_TITLE varchar(35) NOT NULL DEFAULT ' ', 
MIN_SALARY decimal(6,0) DEFAULT 8000, 
MAX_SALARY decimal(6,0) DEFAULT NULL 
)ENGINE=InnoDB; 
 
 
+------------+--------------+------+-----+---------+-------+ 
| Field      | Type         | Null | Key | Default | Extra | 
+------------+--------------+------+-----+---------+-------+ 
| JOB_ID     | int(11)      | NO   | PRI | NULL    |       | 
| JOB_TITLE  | varchar(35)  | NO   |     |         |       | 
| MIN_SALARY | decimal(6,0) | YES  |     | 8000    |       | 
| MAX_SALARY | decimal(6,0) | YES  |     | NULL    |       | 
+------------+--------------+------+-----+---------+-------+ 
CREATE TABLE IF NOT EXISTS employees ( 
EMPLOYEE_ID decimal(6,0) NOT NULL PRIMARY KEY, 
FIRST_NAME varchar(20) DEFAULT NULL, 
LAST_NAME varchar(25) NOT NULL, 
JOB_ID INTEGER, 
SALARY decimal(8,2) DEFAULT NULL, 
FOREIGN KEY(JOB_ID) 
REFERENCES  jobs(JOB_ID) 
ON DELETE SET NULL 
ON UPDATE SET NULL 
)ENGINE=InnoDB;
Here is the structure of the table:
SQL Code Questions 16
20. Write a SQL statement to create a table employees including columns 
employee_id, first_name, last_name, job_id, salary and make sure that, the 
employee_id column does not contain any duplicate value at the time of 
insertion, and the foreign key column job_id, referenced by the column job_id 
of jobs table, can contain only those values which are exists in the jobs table. 
The InnoDB Engine have been used to create the tables. The specialty of the 
statement is that, The ON DELETE NO ACTION and the ON UPDATE NO 
ACTION actions will reject the deletion and any updates.
Assume that the structure of two table jobs and InnoDB Engine have been 
used to create the table jobs.
CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID integer NOT NULL UNIQUE PRIMARY KEY, 
JOB_TITLE varchar(35) NOT NULL DEFAULT ' ', 
MIN_SALARY decimal(6,0) DEFAULT 8000, 
MAX_SALARY decimal(6,0) DEFAULT NULL 
)ENGINE=InnoDB; 
 
 
+------------+--------------+------+-----+---------+-------+ 
| Field      | Type         | Null | Key | Default | Extra | 
+------------+--------------+------+-----+---------+-------+ 
| JOB_ID     | int(11)      | NO   | PRI | NULL    |       | 
| JOB_TITLE  | varchar(35)  | NO   |     |         |       | 
| MIN_SALARY | decimal(6,0) | YES  |     | 8000    |       | 
| MAX_SALARY | decimal(6,0) | YES  |     | NULL    |       | 
+------------+--------------+------+-----+---------+-------+ 
SQL Code Questions 17
CREATE TABLE IF NOT EXISTS employees ( 
EMPLOYEE_ID decimal(6,0) NOT NULL PRIMARY KEY, 
FIRST_NAME varchar(20) DEFAULT NULL, 
LAST_NAME varchar(25) NOT NULL, 
JOB_ID INTEGER NOT NULL, 
SALARY decimal(8,2) DEFAULT NULL, 
FOREIGN KEY(JOB_ID) 
REFERENCES  jobs(JOB_ID) 
ON DELETE NO ACTION 
ON UPDATE NO ACTION 
)ENGINE=InnoDB;
Here is the structure of the table:
MySQL Insert Rows into the Table 
Questions
1. Write a SQL statement to insert a record with your own value into the table 
countries against each columns. 
Here in the following is the structure of the table countries. 
+--------------+---------------+------+-----+---------+-------+ 
| Field        | Type          | Null | Key | Default | Extra | 
+--------------+---------------+------+-----+---------+-------+ 
| COUNTRY_ID   | varchar(2)    | YES  |     | NULL    |       | 
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       | 
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       | 
+--------------+---------------+------+-----+---------+-------+ 
SQL Code Questions 18
INSERT INTO countries VALUES('C1','India',1001);
Here is the structure of the table:
2. Write a SQL statement to insert one row into the table countries against the 
column country_id and country_name. 
Here in the following is the structure of the table countries. 
+--------------+---------------+------+-----+---------+-------+ 
| Field        | Type          | Null | Key | Default | Extra | 
+--------------+---------------+------+-----+---------+-------+ 
| COUNTRY_ID   | varchar(2)    | YES  |     | NULL    |       | 
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       | 
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       | 
+--------------+---------------+------+-----+---------+-------+ 
 
INSERT INTO countries (country_id,country_name) VALUES('C1','India');
Here is the structure of the table:
3. Write a SQL statement to create duplicate of countries table named 
country_new with all structure and data. 
Here in the following is the structure of the table countries. 
SQL Code Questions 19
+--------------+---------------+------+-----+---------+-------+ 
| Field        | Type          | Null | Key | Default | Extra | 
+--------------+---------------+------+-----+---------+-------+ 
| COUNTRY_ID   | varchar(2)    | YES  |     | NULL    |       | 
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       | 
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       | 
+--------------+---------------+------+-----+---------+-------+ 
CREATE TABLE IF NOT EXISTS country_new 
AS SELECT * FROM countries;
Here is the structure of the table:
4. Write a SQL statement to insert NULL values against region_id column for a 
row of countries table.
 
INSERT INTO countries (country_id,country_name,region_id) VALUES('C1','India',NULL);
Here is the structure of the table:
SQL Code Questions 20
5. Write a SQL statement to insert 3 rows by a single insert statement.
INSERT INTO countries VALUES('C0001','India',1001), 
('C0002','USA',1007),('C0003','UK',1003);
Here is the structure of the table:
6. Write a SQL statement insert rows from country_new table to countries 
table. 
Here is the rows for country_new table. Assume that, the countries table is 
empty. 
+------------+--------------+-----------+ 
| COUNTRY_ID | COUNTRY_NAME | REGION_ID | 
+------------+--------------+-----------+ 
| C0001      | India        |      1001 | 
| C0002      | USA          |      1007 | 
| C0003      | UK           |      1003 | 
+------------+--------------+-----------+
INSERT INTO countries 
SELECT * FROM country_new;
SQL Code Questions 21
7. Write a SQL statement to insert one row in jobs table to ensure that no 
duplicate value will be entered in the job_id column.
INSERT INTO jobs VALUES(1001,'OFFICER',8000);
8. Write a SQL statement to insert one row in jobs table to ensure that no 
duplicate value will be entered in the job_id column.
INSERT INTO jobs VALUES(1001,'OFFICER',8000);
9. Write a SQL statement to insert a record into the table countries to ensure 
that, a country_id and region_id combination will be entered once in the table.
INSERT INTO countries VALUES(501,'Italy',185);
SQL Code Questions 22
10. Write a SQL statement to insert rows into the table countries in which the 
value of country_id column will be unique and auto incremented.
INSERT INTO countries(COUNTRY_NAME,REGION_ID) VALUES('India',185);
Here is the structure of the table:
INSERT INTO countries(COUNTRY_NAME,REGION_ID) VALUES('Japan',102);
11. Write a SQL statement to insert records into the table countries to ensure 
that the country_id column will not contain any duplicate data and this will be 
automatically incremented and the column country_name will be filled up by 
'N/A' if no value assigned for that column. 
INSERT INTO countries VALUES(501,'India',102);
SQL Code Questions 23
INSERT INTO countries(region_id) VALUES(109);
INSERT INTO countries(country_name,region_id) VALUES('Australia',121);
12. Write a SQL statement to insert rows in the job_history table in which one 
column job_id is containing those values which are exists in job_id column of 
jobs table.
CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID integer NOT NULL UNIQUE PRIMARY KEY, 
JOB_TITLE varchar(35) NOT NULL DEFAULT ' ', 
MIN_SALARY decimal(6,0) DEFAULT 8000, 
MAX_SALARY decimal(6,0) DEFAULT 20000 
)ENGINE=InnoDB; 
SQL Code Questions 24
 
INSERT INTO jobs(JOB_ID,JOB_TITLE) VALUES(1001,'OFFICER'); 
INSERT INTO jobs(JOB_ID,JOB_TITLE) VALUES(1002,'CLERK'); 
 
+--------+-----------+------------+------------+ 
| JOB_ID | JOB_TITLE | MIN_SALARY | MAX_SALARY | 
+--------+-----------+------------+------------+ 
|   1001 | OFFICER   |       8000 |      20000 | 
|   1002 | CLERK     |       8000 |      20000 | 
+--------+-----------+------------+------------+ 
2 rows in set (0.00 sec) 
 
Sample table job_history; 
 
CREATE TABLE job_history ( 
EMPLOYEE_ID integer NOT NULL PRIMARY KEY, 
JOB_ID integer NOT NULL, 
DEPARTMENT_ID integer DEFAULT NULL, 
FOREIGN KEY (job_id) REFERENCES jobs(job_id) 
)ENGINE=InnoDB;
INSERT INTO job_history VALUES(501,1001,60);
Here is the structure of the table:
The value against job_id is 1001 which is exists in the job_id column of the jobs 
table, so no problem arise.
Now insert another row in the job_history table.
INSERT INTO job_history VALUES(502,1003,80);
Let execute the above code
SQL Code Questions 25
13. Write a SQL statement to insert rows into the table employees in which a 
set of columns department_id and manager_id contains a unique value and 
that combined values must have exists into the table departments.
Sample table departments. 
 
 
CREATE TABLE IF NOT EXISTS departments ( 
DEPARTMENT_ID integer NOT NULL UNIQUE, 
DEPARTMENT_NAME varchar(30) NOT NULL, 
MANAGER_ID integer DEFAULT NULL, 
LOCATION_ID integer DEFAULT NULL, 
PRIMARY KEY (DEPARTMENT_ID) 
)ENGINE=InnoDB; 
 
 
INSERT INTO departments VALUES(60,'SALES',201,89); 
INSERT INTO departments VALUES(61,'ACCOUNTS',201,89); 
 
 
mysql> SELECT * FROM departments; 
+---------------+-----------------+------------+-------------+ 
| DEPARTMENT_ID | DEPARTMENT_NAME | MANAGER_ID | LOCATION_ID | 
+---------------+-----------------+------------+-------------+ 
|            60 | SALES           |        201 |          89 | 
|            61 | ACCOUNTS        |        201 |          89 | 
+---------------+-----------------+------------+-------------+ 
2 rows in set (0.00 sec) 
 
Sample table jobs. 
 
CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID integer NOT NULL UNIQUE PRIMARY KEY, 
JOB_TITLE varchar(35) NOT NULL DEFAULT ' ', 
MIN_SALARY decimal(6,0) DEFAULT 8000, 
MAX_SALARY decimal(6,0) DEFAULT 20000 
)ENGINE=InnoDB; 
 
 
INSERT INTO jobs(JOB_ID,JOB_TITLE) VALUES(1001,'OFFICER'); 
INSERT INTO jobs(JOB_ID,JOB_TITLE) VALUES(1002,'CLERK'); 
 
mysql> SELECT * FROM jobs; 
+--------+-----------+------------+------------+ 
| JOB_ID | JOB_TITLE | MIN_SALARY | MAX_SALARY | 
+--------+-----------+------------+------------+ 
|   1001 | OFFICER   |       8000 |      20000 | 
|   1002 | CLERK     |       8000 |      20000 | 
+--------+-----------+------------+------------+ 
2 rows in set (0.00 sec) 
 
 
Sample table employees. 
 
SQL Code Questions 26
CREATE TABLE IF NOT EXISTS employees ( 
EMPLOYEE_ID integer NOT NULL PRIMARY KEY, 
FIRST_NAME varchar(20) DEFAULT NULL, 
LAST_NAME varchar(25) NOT NULL, 
DEPARTMENT_ID integer DEFAULT NULL, 
FOREIGN KEY(DEPARTMENT_ID) 
REFERENCES  departments(DEPARTMENT_ID), 
JOB_ID integer NOT NULL, 
FOREIGN KEY(JOB_ID) 
REFERENCES  jobs(JOB_ID), 
SALARY decimal(8,2) DEFAULT NULL 
)ENGINE=InnoDB; 
Now insert the rows into the table employees
INSERT INTO employees VALUES(510,'Alex','Hanes','CLERK',18000,201,60); 
INSERT INTO employees VALUES(511,'Kim','Leon','CLERK',18000,211,80);
Here is the structure of the table:
The value against department_id and manager_id combination (60,201) and 
(80,211) are unique in the departmentis(parent) table so, there is no problem arise to 
insert the rows in the child table employees.
Now insert another row in the employees table.
INSERT INTO employees VALUES(512,'Kim','Leon','CLERK',18000,80,211);
Let execute the above code
Here in the above, the value against department_id and manager_id combination 
(211,80) does not matching with the same combination in departments(parent table) 
table and that is why the child table employees can not contain the combination of 
SQL Code Questions 27
values including department_id and manager_id as specified. Here the primary key - 
foreign key relationship is being violated and shows the above message.
14. Write a SQL statement to insert rows into the table employees in which a 
set of columns department_id and job_id contains the values which must have 
exists into the table departments and jobs.
Sample table departments. 
 
 
CREATE TABLE IF NOT EXISTS departments ( 
DEPARTMENT_ID integer NOT NULL UNIQUE, 
DEPARTMENT_NAME varchar(30) NOT NULL, 
MANAGER_ID integer DEFAULT NULL, 
LOCATION_ID integer DEFAULT NULL, 
PRIMARY KEY (DEPARTMENT_ID) 
)ENGINE=InnoDB; 
 
 
INSERT INTO departments VALUES(60,'SALES',201,89); 
INSERT INTO departments VALUES(61,'ACCOUNTS',201,89); 
 
 
mysql> SELECT * FROM departments; 
+---------------+-----------------+------------+-------------+ 
| DEPARTMENT_ID | DEPARTMENT_NAME | MANAGER_ID | LOCATION_ID | 
+---------------+-----------------+------------+-------------+ 
|            60 | SALES           |        201 |          89 | 
|            61 | ACCOUNTS        |        201 |          89 | 
+---------------+-----------------+------------+-------------+ 
2 rows in set (0.00 sec) 
 
Sample table jobs. 
 
CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID integer NOT NULL UNIQUE PRIMARY KEY, 
JOB_TITLE varchar(35) NOT NULL DEFAULT ' ', 
MIN_SALARY decimal(6,0) DEFAULT 8000, 
MAX_SALARY decimal(6,0) DEFAULT 20000 
)ENGINE=InnoDB; 
 
 
INSERT INTO jobs(JOB_ID,JOB_TITLE) VALUES(1001,'OFFICER'); 
INSERT INTO jobs(JOB_ID,JOB_TITLE) VALUES(1002,'CLERK'); 
 
mysql> SELECT * FROM jobs; 
+--------+-----------+------------+------------+ 
| JOB_ID | JOB_TITLE | MIN_SALARY | MAX_SALARY | 
+--------+-----------+------------+------------+ 
|   1001 | OFFICER   |       8000 |      20000 | 
|   1002 | CLERK     |       8000 |      20000 | 
+--------+-----------+------------+------------+ 
2 rows in set (0.00 sec) 
 
 
SQL Code Questions 28
Sample table employees. 
 
CREATE TABLE IF NOT EXISTS employees ( 
EMPLOYEE_ID integer NOT NULL PRIMARY KEY, 
FIRST_NAME varchar(20) DEFAULT NULL, 
LAST_NAME varchar(25) NOT NULL, 
DEPARTMENT_ID integer DEFAULT NULL, 
FOREIGN KEY(DEPARTMENT_ID) 
REFERENCES  departments(DEPARTMENT_ID), 
JOB_ID integer NOT NULL, 
FOREIGN KEY(JOB_ID) 
REFERENCES  jobs(JOB_ID), 
SALARY decimal(8,2) DEFAULT NULL 
)ENGINE=InnoDB; 
Now insert the rows into the table employees.
INSERT INTO employees VALUES(510,'Alex','Hanes',60,1001,18000);
Here is the structure of the table:
mysql> SELECT * FROM employees; 
+-------------+------------+-----------+---------------+--------+----------+ 
| EMPLOYEE_ID | FIRST_NAME | LAST_NAME | DEPARTMENT_ID | JOB_ID | SALARY   | 
+-------------+------------+-----------+---------------+--------+----------+ 
|         510 | Alex       | Hanes     |            60 |   1001 | 18000.00 | 
+-------------+------------+-----------+---------------+--------+----------+ 
1 row in set (0.00 sec)
Here in the above insert statement the child column department_id and job_id of 
child table employees are successfully referencing with the department_id and 
job_id column of parent tables departments and jobs respectively, so no problem 
have been arisen to the insertion.
Now insert another row in the employees table.
INSERT INTO employees VALUES(511,'Tom','Elan',60,1003,22000);
Let execute the above code
SQL Code Questions 29
Here in the above insert statement show that, within child columns department_id 
and job_id of child table employees, the department_id are successfully referencing 
with the department_id of parent table departments but job_id column are not 
successfully referencing with the job_id of parent table jobs, so the problem have 
been arisen to the insertion displayed an error message.
Now insert another row in the employees table.
INSERT INTO employees VALUES(511,'Tom','Elan',80,1001,22000);
Here in the above insert statement show that, within child columns department_id 
and job_id of child table employees, the job_id are successfully referencing with the 
job_id of parent table jobs but department_id column are not successfully 
referencing with the department_id of parent table departments, so the problem have 
been arisen to the insertion and displayed the error message.
MySQL Update Table Questions
1. Write a SQL statement to change the email column of employees table with 
'not available' for all employees.
Here is the sample table employees.
SQL Code Questions 30
UPDATE employees SET email='not available';
2. Write a SQL statement to change the email and commission_pct column of 
employees table with 'not available' and 0.10 for all employees.
Here is the sample table employees.
UPDATE employees SET email='not available', 
commission_pct=0.10;
3. Write a SQL statement to change the email and commission_pct column of 
employees table with 'not available' and 0.10 for those employees whose 
department_id is 110.
Here is the sample table employees.
SQL Code Questions 31
UPDATE employees 
SET email='not available', 
commission_pct=0.10 
WHERE department_id=110;
See the result. Only two rows have been displayed.
4. Write a SQL statement to change the email column of employees table with 
'not available' for those employees whose department_id is 80 and gets a 
commission is less than .20%
Here is the sample table employees.
SQL Code Questions 32
UPDATE employees 
SET email='not available' 
WHERE department_id=80 AND commission_pct<.20;
See the result. Only the effected rows have been displayed.
5. Write a SQL statement to change the email column of employees table with 
'not available' for those employees who belongs to the 'Accouning' 
department.
Here is the sample table employees.
Here is the sample table departments.
+---------------+----------------------+------------+-------------+ 
| DEPARTMENT_ID | DEPARTMENT_NAME      | MANAGER_ID | LOCATION_ID | 
+---------------+----------------------+------------+-------------+ 
|            10 | Administration       |        200 |        1700 | 
|            20 | Marketing            |        201 |        1800 | 
|            30 | Purchasing           |        114 |        1700 | 
|            40 | Human Resources      |        203 |        2400 | 
|            50 | Shipping             |        121 |        1500 | 
|            60 | IT                   |        103 |        1400 | 
|            70 | Public Relations     |        204 |        2700 | 
SQL Code Questions 33
|            80 | Sales                |        145 |        2500 | 
|            90 | Executive            |        100 |        1700 | 
|           100 | Finance              |        108 |        1700 | 
|           110 | Accounting           |        205 |        1700 | 
|           120 | Treasury             |          0 |        1700 | 
|           130 | Corporate Tax        |          0 |        1700 | 
|           140 | Control And Credit   |          0 |        1700 | 
|           150 | Shareholder Services |          0 |        1700 | 
|           160 | Benefits             |          0 |        1700 | 
|           170 | Manufacturing        |          0 |        1700 | 
|           180 | Construction         |          0 |        1700 | 
|           190 | Contracting          |          0 |        1700 | 
|           200 | Operations           |          0 |        1700 | 
|           210 | IT Support           |          0 |        1700 | 
|           220 | NOC                  |          0 |        1700 | 
|           230 | IT Helpdesk          |          0 |        1700 | 
|           240 | Government Sales     |          0 |        1700 | 
|           250 | Retail Sales         |          0 |        1700 | 
|           260 | Recruiting           |          0 |        1700 | 
|           270 | Payroll              |          0 |        1700 | 
+---------------+----------------------+------------+-------------+
UPDATE employees 
SET email='not available' 
WHERE department_id=( 
SELECT department_id 
FROM departments 
WHERE department_name='Accounting');
See the result. Only the effected rows have been displayed.
6. Write a SQL statement to change salary of employee to 8000 whose ID is 
105, if the existing salary is less than 5000.
Here is the sample table employees.
SQL Code Questions 34
UPDATE employees SET SALARY = 8000 WHERE employee_id = 105 AND salary < 5000;
See the result. Only the effected rows have been displayed.
7. Write a SQL statement to change job ID of employee which ID is 118, to 
SH_CLERK if the employee belongs to department, which ID is 30 and the 
existing job ID does not start with SH.
Here is the sample table employees.
UPDATE employees SET JOB_ID= 'SH_CLERK' 
WHERE employee_id=118 
SQL Code Questions 35
AND department_id=30 
AND NOT JOB_ID LIKE 'SH%';
See the result. Only the effected rows have been displayed.
8. Write a SQL statement to increase the salary of employees under the 
department 40, 90 and 110 according to the company rules that, salary will be 
increased by 25% for the department 40, 15% for department 90 and 10% for 
the department 110 and the rest of the departments will remain same.
Here is the sample table employees.
UPDATE employees SET salary= CASE department_id 
WHEN 40 THEN salary+(salary*.25) 
WHEN 90 THEN salary+(salary*.15) 
WHEN 110 THEN salary+(salary*.10) 
ELSE salary 
END 
WHERE department_id IN (40,50,50,60,70,80,90,110);
See the result before update. Only the effected rows have been displayed.
SQL Code Questions 36
9. Write a SQL statement to increase the minimum and maximum salary of 
PU_CLERK by 2000 as well as the salary for those employees by 20% and 
commission percent by .10.
Here is the sample table employees.
Here is the sample table jobs.
+------------+---------------------------------+------------+------------+ 
| JOB_ID     | JOB_TITLE                       | MIN_SALARY | MAX_SALARY | 
+------------+---------------------------------+------------+------------+ 
| AD_PRES    | President                       |      20000 |      40000 | 
| AD_VP      | Administration Vice President   |      15000 |      30000 | 
| AD_ASST    | Administration Assistant        |       3000 |       6000 | 
| FI_MGR     | Finance Manager                 |       8200 |      16000 | 
| FI_ACCOUNT | Accountant                      |       4200 |       9000 | 
| AC_MGR     | Accounting Manager              |       8200 |      16000 | 
| AC_ACCOUNT | Public Accountant               |       4200 |       9000 | 
| SA_MAN     | Sales Manager                   |      10000 |      20000 | 
| SA_REP     | Sales Representative            |       6000 |      12000 | 
| PU_MAN     | Purchasing Manager              |       8000 |      15000 | 
| PU_CLERK   | Purchasing Clerk                |       2500 |       5500 | 
| ST_MAN     | Stock Manager                   |       5500 |       8500 | 
| ST_CLERK   | Stock Clerk                     |       2000 |       5000 | 
| SH_CLERK   | Shipping Clerk                  |       2500 |       5500 | 
| IT_PROG    | Programmer                      |       4000 |      10000 | 
| MK_MAN     | Marketing Manager               |       9000 |      15000 | 
| MK_REP     | Marketing Representative        |       4000 |       9000 | 
| HR_REP     | Human Resources Representative  |       4000 |       9000 | 
| PR_REP     | Public Relations Representative |       4500 |      10500 | 
+------------+---------------------------------+------------+------------+
UPDATE jobs,employees 
SET jobs.min_salary=jobs.min_salary+2000, 
SQL Code Questions 37
jobs.max_salary=jobs.max_salary+2000, 
employees.salary=employees.salary+(employees.salary*.20), 
employees.commission_pct=employees.commission_pct+.10 
WHERE jobs.job_id='PU_CLERK' 
AND employees.job_id='PU_CLERK';
See the result before update. Only the effected rows have been displayed.
See the result. Only the effected rows have been displayed.
Here is the FULL sample table employees.
SQL Code Questions 38
